# coding: utf-8

"""
    家具マッチングサービス

    画像によるレコメンド機能を添えて

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FurnitureResponse(BaseModel):
    """
    FurnitureResponse
    """ # noqa: E501
    furniture_id: Optional[StrictInt] = None
    image: Optional[Union[StrictBytes, StrictStr]] = None
    area: Optional[StrictInt] = Field(default=None, description="TODO 都道府県コード, URL()")
    username: Optional[Union[StrictBytes, StrictStr]] = None
    product_name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    size: Optional[StrictStr] = Field(default=None, description="height width depth(スペース区切り)")
    category: Optional[StrictInt] = Field(default=None, description="12個")
    color: Optional[StrictInt] = Field(default=None, description="TODO 個数はあとで決める")
    condition: Optional[StrictInt] = Field(default=None, description="6段階評価")
    is_sold: Optional[StrictBool] = None
    start_date: Optional[date] = None
    end_date: Optional[date] = None
    trade_place: Optional[StrictStr] = Field(default=None, description="具体的な取引場所")
    is_favorite: Optional[StrictBool] = Field(default=None, description="「いいねした商品」用")
    __properties: ClassVar[List[str]] = ["furniture_id", "image", "area", "username", "product_name", "description", "size", "category", "color", "condition", "is_sold", "start_date", "end_date", "trade_place", "is_favorite"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FurnitureResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FurnitureResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "furniture_id": obj.get("furniture_id"),
            "image": obj.get("image"),
            "area": obj.get("area"),
            "username": obj.get("username"),
            "product_name": obj.get("product_name"),
            "description": obj.get("description"),
            "size": obj.get("size"),
            "category": obj.get("category"),
            "color": obj.get("color"),
            "condition": obj.get("condition"),
            "is_sold": obj.get("is_sold"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "trade_place": obj.get("trade_place"),
            "is_favorite": obj.get("is_favorite")
        })
        return _obj


